import base64 #Пытаешься Розсекретить мой код = дура)
base64_string = ""
decoded_bytes = base64.b64decode(base64_string)
decoded_string = decoded_bytes.decode('utf-8')
exec(decoded_string)
